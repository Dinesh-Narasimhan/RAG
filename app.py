# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w7EIbkIlWwREXQtuKom7BF7cibbkEEmn
"""

# -*- coding: utf-8 -*-
import streamlit as st
from sentence_transformers import SentenceTransformer
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch
import numpy as np
import faiss
import os
import docx
import fitz  # PyMuPDF
import tempfile

# Load embedder and Phi-2 once
@st.cache_resource
def load_models():
    embedder = SentenceTransformer('all-MiniLM-L6-v2')
    tokenizer = AutoTokenizer.from_pretrained("microsoft/phi-2")
    model = AutoModelForCausalLM.from_pretrained(
        "microsoft/phi-2",
        torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
    ).to(torch.device("cuda" if torch.cuda.is_available() else "cpu"))
    model.eval()
    return embedder, tokenizer, model

embedder, tokenizer, model = load_models()

# File reading logic
def read_file(file_path, ext):
    if ext == ".txt":
        return open(file_path, 'r', encoding='utf-8').read()
    elif ext == ".docx":
        doc = docx.Document(file_path)
        return "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
    elif ext == ".pdf":
        pdf = fitz.open(file_path)
        return "\n".join([page.get_text() for page in pdf])
    else:
        return ""

def chunk_text(text, max_words=100):
    words = text.split()
    return [' '.join(words[i:i + max_words]) for i in range(0, len(words), max_words)]

st.title("üß† Ask Your Notes with Phi-2 (RAG)")

uploaded_file = st.file_uploader("üìÇ Upload .txt, .docx, or .pdf file", type=["txt", "docx", "pdf"])
if uploaded_file:
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(uploaded_file.read())
        file_path = tmp.name
    ext = os.path.splitext(uploaded_file.name)[-1].lower()
    full_text = read_file(file_path, ext)
    
    chunks = chunk_text(full_text)
    st.success(f"‚úÖ Text split into {len(chunks)} chunks")

    embeddings = embedder.encode(chunks)
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(np.array(embeddings))

    question = st.text_input("‚ùì Ask a question from your notes:")
    if question:
        question_embedding = embedder.encode([question])
        D, I = index.search(np.array(question_embedding), k=1)
        retrieved_chunk = chunks[I[0][0]]

        prompt = f"""You are a knowledgeable tutor. Using the context provided, write a very detailed and comprehensive answer to the question below. Make sure the answer is clear, complete, and at least 300 words long.

Context: {retrieved_chunk}

Question: {question}
Answer:"""

        input_ids = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512).to(model.device)

        with torch.no_grad():
            output = model.generate(
                **input_ids,
                max_new_tokens=700,
                min_length=450,
                do_sample=True,
                top_k=50,
                top_p=0.95,
                temperature=0.7,
                eos_token_id=tokenizer.eos_token_id
            )
        decoded = tokenizer.decode(output[0], skip_special_tokens=True)
        answer = decoded[len(prompt):].strip()

        st.markdown("### üß† Answer:")
        st.write(answer)

